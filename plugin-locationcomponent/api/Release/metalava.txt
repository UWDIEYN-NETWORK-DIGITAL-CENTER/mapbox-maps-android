// Signature format: 3.0
package com.mapbox.maps.plugin.locationcomponent {

  public final class DefaultLocationProvider implements com.mapbox.maps.plugin.locationcomponent.LocationProvider {
    ctor public DefaultLocationProvider(android.content.Context context);
    method public void addOnCompassCalibrationListener(com.mapbox.maps.plugin.locationcomponent.LocationCompassCalibrationListener listener);
    method public void locationAnimatorOptions(kotlin.jvm.functions.Function1<? super android.animation.ValueAnimator,kotlin.Unit>? options);
    method public void registerLocationConsumer(com.mapbox.maps.plugin.locationcomponent.LocationConsumer locationConsumer);
    method public void removeCompassCalibrationListener(com.mapbox.maps.plugin.locationcomponent.LocationCompassCalibrationListener listener);
    method public void unRegisterLocationConsumer(com.mapbox.maps.plugin.locationcomponent.LocationConsumer locationConsumer);
    method public void updatePuckBearing(com.mapbox.maps.plugin.PuckBearing? source);
  }

  public fun interface LocationCompassCalibrationListener {
    method public void onCompassCalibrationNeeded();
  }

  public final class LocationComponentConstants {
    field public static final long ACCURACY_RADIUS_ANIMATION_DURATION = 250L; // 0xfaL
    field public static final String BEARING_ICON = "mapbox-location-bearing-icon";
    field public static final long COMPASS_UPDATE_RATE_MS = 500L; // 0x1f4L
    field public static final long DEFAULT_FASTEST_INTERVAL_MILLIS = 1000L; // 0x3e8L
    field public static final long DEFAULT_INTERVAL_MILLIS = 1000L; // 0x3e8L
    field public static final float DEFAULT_MINIMUM_DISPLACEMENT_METERS = 0.1f;
    field public static final long DEFAULT_TRACKING_PADDING_ANIM_DURATION = 750L; // 0x2eeL
    field public static final long DEFAULT_TRACKING_TILT_ANIM_DURATION = 1250L; // 0x4e2L
    field public static final long DEFAULT_TRACKING_ZOOM_ANIM_DURATION = 750L; // 0x2eeL
    field public static final com.mapbox.maps.plugin.locationcomponent.LocationComponentConstants INSTANCE;
    field public static final double INSTANT_LOCATION_TRANSITION_THRESHOLD = 50000.0;
    field public static final String LOCATION_INDICATOR_LAYER = "mapbox-location-indicator-layer";
    field public static final long MAX_ANIMATION_DURATION_MS = 2000L; // 0x7d0L
    field public static final String MODEL_LAYER = "mapbox-location-model-layer";
    field public static final String MODEL_SOURCE = "mapbox-location-model-source";
    field public static final float PULSING_MAX_RADIUS_FOLLOW_ACCURACY = -1.0f;
    field public static final String SHADOW_ICON = "mapbox-location-shadow-icon";
    field public static final String TOP_ICON = "mapbox-location-top-icon";
    field public static final long TRANSITION_ANIMATION_DURATION_MS = 750L; // 0x2eeL
  }

  public final class LocationComponentUtils {
    method public static com.mapbox.maps.plugin.LocationPuck2D createDefault2DPuck(boolean withBearing = false);
    method public static com.mapbox.maps.plugin.LocationPuck2D createDefault2DPuck();
    method public static com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin getLocationComponent(com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate);
  }

}

package com.mapbox.maps.plugin.locationcomponent.model {

  @com.mapbox.maps.MapboxExperimental public final class AnimatableModel {
    method public String getColor();
    method public double getColorMixIntensity();
    method public double getEmissiveStrength();
    method @com.mapbox.maps.MapboxExperimental public com.mapbox.maps.plugin.LocationPuck3D getLocationPuck3D();
    method public String getModelUri();
    method public double getOpacity();
    method public java.util.List<java.lang.Double> getRotation();
    method public void setColor(String);
    method public void setColorMixIntensity(double);
    method public void setEmissiveStrength(double);
    method public void setOpacity(double);
    method public void setRotation(java.util.List<java.lang.Double>);
    property public final String color;
    property public final double colorMixIntensity;
    property public final double emissiveStrength;
    property public final String modelUri;
    property public final double opacity;
    property public final java.util.List<java.lang.Double> rotation;
  }

  public final class AnimatableModelKt {
    method @com.mapbox.maps.MapboxExperimental public static com.mapbox.maps.plugin.locationcomponent.model.AnimatableModel createAnimatableModel(com.mapbox.maps.plugin.locationcomponent.LocationComponentPlugin, String modelUri, java.util.List<? extends com.mapbox.maps.plugin.locationcomponent.model.ModelPart> modelParts);
  }

  @com.mapbox.maps.MapboxExperimental public class ModelMaterialPart extends com.mapbox.maps.plugin.locationcomponent.model.ModelPart {
    ctor public ModelMaterialPart(String featureStateId, java.util.List<java.lang.String> materialOverrides);
    ctor public ModelMaterialPart(String materialOverride);
    method public final String getColor();
    method public final double getColorMixIntensity();
    method public final double getEmissiveStrength();
    method public final java.util.List<java.lang.String> getMaterialOverrides();
    method public final double getOpacity();
    method @com.mapbox.maps.MapboxExperimental public final void resetColor();
    method public final void setColor(String);
    method public final void setColorMixIntensity(double);
    method public final void setEmissiveStrength(double);
    method public final void setOpacity(double);
    method @com.mapbox.maps.MapboxExperimental public final void updateColor(@ColorInt int color, double colorMixIntensity = 1.0);
    property public final String color;
    property public final double colorMixIntensity;
    property public final double emissiveStrength;
    property public final java.util.List<java.lang.String> materialOverrides;
    property public final double opacity;
  }

  @com.mapbox.maps.MapboxExperimental public class ModelNodePart extends com.mapbox.maps.plugin.locationcomponent.model.ModelPart {
    ctor public ModelNodePart(String featureStateId, java.util.List<java.lang.String> nodeOverrides);
    ctor public ModelNodePart(String nodeOverride);
    method public final java.util.List<java.lang.String> getNodeOverrides();
    method public final java.util.List<java.lang.Double> getRotation();
    method public final void setRotation(java.util.List<java.lang.Double>);
    property public final java.util.List<java.lang.String> nodeOverrides;
    property public final java.util.List<java.lang.Double> rotation;
  }

  @com.mapbox.maps.MapboxExperimental public abstract class ModelPart {
    ctor public ModelPart(String featureStateId);
    method public final String getFeatureStateId();
    method protected final kotlin.jvm.functions.Function1<com.mapbox.bindgen.Value,java.lang.Boolean> getUpdateFeatureState();
    method protected final void setUpdateFeatureState(kotlin.jvm.functions.Function1<? super com.mapbox.bindgen.Value,java.lang.Boolean>);
    property public final String featureStateId;
    property protected final kotlin.jvm.functions.Function1<com.mapbox.bindgen.Value,java.lang.Boolean> updateFeatureState;
  }

}

package com.mapbox.maps.plugin.locationcomponent.utils {

  public final class ExpectedUtilsKt {
  }

}

